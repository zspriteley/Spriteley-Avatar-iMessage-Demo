//
//  MessagesViewController.swift
//  Spriteley Demo iMessage Avatar MessagesExtension
//
//  Created by Spriteley on 4/20/22.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        removeAllChildViewControllers()
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    // MARK: Child view controller presentation
    /// - Tag: PresentViewController
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        // Remove any child view controllers that have been presented.
        removeAllChildViewControllers()
        
        let controller: UIViewController
        if presentationStyle == .compact {
            // Show a list of previously created ice creams.
            controller = instantiateAvatarController()
        } else {
            controller = instantiateAvatarController()
        }

        addChild(controller)
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        NSLayoutConstraint.activate([
            controller.view.leftAnchor.constraint(equalTo: view.leftAnchor),
            controller.view.rightAnchor.constraint(equalTo: view.rightAnchor),
            controller.view.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            controller.view.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
        
        controller.didMove(toParent: self)
    }
    
    private func instantiateAvatarController() -> UIViewController {
        let controller = AvatarViewController()
        controller.messageDelegate = self
        return controller
    }
    
    
    // MARK: Convenience
    private func removeAllChildViewControllers() {
        for child in children {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }
    }

}

//MARK: AvatarViewControllerDelegate

extension MessagesViewController:AvatarViewControllerDelegate{
    
    func sendAvatar() {
        print("send avatar request recieved")
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }

        // Create a new message with the same session as any currently selected message.
        
        //composeMessage(with: iceCream, caption: messageCaption, session: conversation.selectedMessage?.session)

        let alternateMessageLayout = MSMessageTemplateLayout()
        alternateMessageLayout.caption = "Sending avatar to you... Download Spriteley Today!"
        alternateMessageLayout.image = captureScreen()
    
        let layout = MSMessageLiveLayout(alternateLayout: alternateMessageLayout)
        
        let message = MSMessage()
        message.layout = layout
    

        conversation.send(message) { error in
            if let error = error{
                print("error sending message: \(error.localizedDescription)")
            }else{
                print("message sent a success")
            }
        }
        
        dismiss()
    }
    
//    func captureScreen()->UIImage{
//        var screenGrab = UIImage()
//        UIGraphicsBeginImageContextWithOptions(view.bounds.size, view.isOpaque, 0.0)
//        view.layer.render(in: UIGraphicsGetCurrentContext()!)
//        screenGrab = UIGraphicsGetImageFromCurrentImageContext()!
//        UIGraphicsEndImageContext()
//        return screenGrab
//    }
    
    func captureScreen()->UIImage{
        let view = UIView(frame: CGRect(origin: .zero, size: CGSize(width: 320, height: 500)))
        let render = UIGraphicsImageRenderer(size: view.bounds.size)
        let image = render.image { (context) in
            view.drawHierarchy(in: view.bounds, afterScreenUpdates: true)
        }
        return image
    }
}
